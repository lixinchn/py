#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Errtype:
  TICKET_CREATE_FAILD = 90001
  TICKET_EXPLAIN_FAILD = 90002
  REQUEST_TOO_FASTER = 90003
  SYSTEM_WRONG = 90004
  USER_NO_FIND = 10020
  USER_NOT_VALIDATE = 10015
  USER_IS_EXIST = 10032
  PASSWORD_WRONG = 10021
  DEVICE_ID_NOT_BIND = 10031
  DEVICE_ID_IS_EXIST = 10033
  PARAM_NOT_ALLOW_EMPTY = 20001
  PNUM_FORMATE_WRONG = 20101
  UID_FORMATE_WRONG = 20102
  OS_FORMATE_WRONG = 20103
  APP_ID_FORMATE_WRONG = 20104
  DEVICE_ID_FORMATE_WRONG = 20105

  _VALUES_TO_NAMES = {
    90001: "TICKET_CREATE_FAILD",
    90002: "TICKET_EXPLAIN_FAILD",
    90003: "REQUEST_TOO_FASTER",
    90004: "SYSTEM_WRONG",
    10020: "USER_NO_FIND",
    10015: "USER_NOT_VALIDATE",
    10032: "USER_IS_EXIST",
    10021: "PASSWORD_WRONG",
    10031: "DEVICE_ID_NOT_BIND",
    10033: "DEVICE_ID_IS_EXIST",
    20001: "PARAM_NOT_ALLOW_EMPTY",
    20101: "PNUM_FORMATE_WRONG",
    20102: "UID_FORMATE_WRONG",
    20103: "OS_FORMATE_WRONG",
    20104: "APP_ID_FORMATE_WRONG",
    20105: "DEVICE_ID_FORMATE_WRONG",
  }

  _NAMES_TO_VALUES = {
    "TICKET_CREATE_FAILD": 90001,
    "TICKET_EXPLAIN_FAILD": 90002,
    "REQUEST_TOO_FASTER": 90003,
    "SYSTEM_WRONG": 90004,
    "USER_NO_FIND": 10020,
    "USER_NOT_VALIDATE": 10015,
    "USER_IS_EXIST": 10032,
    "PASSWORD_WRONG": 10021,
    "DEVICE_ID_NOT_BIND": 10031,
    "DEVICE_ID_IS_EXIST": 10033,
    "PARAM_NOT_ALLOW_EMPTY": 20001,
    "PNUM_FORMATE_WRONG": 20101,
    "UID_FORMATE_WRONG": 20102,
    "OS_FORMATE_WRONG": 20103,
    "APP_ID_FORMATE_WRONG": 20104,
    "DEVICE_ID_FORMATE_WRONG": 20105,
  }

class Scoretype:
  _ACTION_TYPE_AD = 0
  _ACTION_TYPE_RIGHT_CATCH = 1
  _ACTION_TYPE_REGISTER = 2
  _ACTION_TYPE_OTHER = 3
  _ACTION_TYPE_TASK = 4
  _ACTION_TYPE_ACTIVE = 5
  _ACTION_TYPE_SCORE_REDUCE = 6
  _ACTION_TYPE_SCORE_REFUND = 7
  _ACTION_TYPE_WIFI_SHARED = 8
  _ACTION_TYPE_BIND_BANK_CARD = 9
  _ACTION_TYPE_AD_WALL_20 = 10
  _ACTION_TYPE_OFFSPRING = 11

  _VALUES_TO_NAMES = {
    0: "_ACTION_TYPE_AD",
    1: "_ACTION_TYPE_RIGHT_CATCH",
    2: "_ACTION_TYPE_REGISTER",
    3: "_ACTION_TYPE_OTHER",
    4: "_ACTION_TYPE_TASK",
    5: "_ACTION_TYPE_ACTIVE",
    6: "_ACTION_TYPE_SCORE_REDUCE",
    7: "_ACTION_TYPE_SCORE_REFUND",
    8: "_ACTION_TYPE_WIFI_SHARED",
    9: "_ACTION_TYPE_BIND_BANK_CARD",
    10: "_ACTION_TYPE_AD_WALL_20",
    11: "_ACTION_TYPE_OFFSPRING",
  }

  _NAMES_TO_VALUES = {
    "_ACTION_TYPE_AD": 0,
    "_ACTION_TYPE_RIGHT_CATCH": 1,
    "_ACTION_TYPE_REGISTER": 2,
    "_ACTION_TYPE_OTHER": 3,
    "_ACTION_TYPE_TASK": 4,
    "_ACTION_TYPE_ACTIVE": 5,
    "_ACTION_TYPE_SCORE_REDUCE": 6,
    "_ACTION_TYPE_SCORE_REFUND": 7,
    "_ACTION_TYPE_WIFI_SHARED": 8,
    "_ACTION_TYPE_BIND_BANK_CARD": 9,
    "_ACTION_TYPE_AD_WALL_20": 10,
    "_ACTION_TYPE_OFFSPRING": 11,
  }

class OS_TYPE:
  _OS_TYPE_UNKNOWN = 0
  _OS_TYPE_ANDROID = 1
  _OS_TYPE_IOS = 2

  _VALUES_TO_NAMES = {
    0: "_OS_TYPE_UNKNOWN",
    1: "_OS_TYPE_ANDROID",
    2: "_OS_TYPE_IOS",
  }

  _NAMES_TO_VALUES = {
    "_OS_TYPE_UNKNOWN": 0,
    "_OS_TYPE_ANDROID": 1,
    "_OS_TYPE_IOS": 2,
  }

class Apptype:
  _APP_ZHUAN = 0
  _APP_WIFI = 1
  _APP_GAME = 2

  _VALUES_TO_NAMES = {
    0: "_APP_ZHUAN",
    1: "_APP_WIFI",
    2: "_APP_GAME",
  }

  _NAMES_TO_VALUES = {
    "_APP_ZHUAN": 0,
    "_APP_WIFI": 1,
    "_APP_GAME": 2,
  }

class workSpace:
  ws_school = 1
  ws_goverment = 2
  ws_bank = 3
  ws_subway = 4
  ws_factory = 5
  ws_home = 6

  _VALUES_TO_NAMES = {
    1: "ws_school",
    2: "ws_goverment",
    3: "ws_bank",
    4: "ws_subway",
    5: "ws_factory",
    6: "ws_home",
  }

  _NAMES_TO_VALUES = {
    "ws_school": 1,
    "ws_goverment": 2,
    "ws_bank": 3,
    "ws_subway": 4,
    "ws_factory": 5,
    "ws_home": 6,
  }


class InvalidOperation(TException):
  """
  @author: zh


  Attributes:
   - what
   - why
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'what', None, None, ), # 1
    (2, TType.STRING, 'why', None, None, ), # 2
  )

  def __init__(self, what=None, why=None,):
    self.what = what
    self.why = why

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.what = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.why = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidOperation')
    if self.what is not None:
      oprot.writeFieldBegin('what', TType.I32, 1)
      oprot.writeI32(self.what)
      oprot.writeFieldEnd()
    if self.why is not None:
      oprot.writeFieldBegin('why', TType.STRING, 2)
      oprot.writeString(self.why)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.what)
    value = (value * 31) ^ hash(self.why)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserAddObj:
  """
  Attributes:
   - pnum
   - pw
   - device_id
   - imsi
   - ic
   - os_type
   - channel
   - client_ip
   - app_id
   - app_version
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'pnum', None, None, ), # 1
    (2, TType.STRING, 'pw', None, None, ), # 2
    (3, TType.STRING, 'device_id', None, None, ), # 3
    (4, TType.STRING, 'imsi', None, None, ), # 4
    (5, TType.STRING, 'ic', None, None, ), # 5
    (6, TType.STRING, 'os_type', None, None, ), # 6
    (7, TType.STRING, 'channel', None, None, ), # 7
    (8, TType.STRING, 'client_ip', None, None, ), # 8
    (9, TType.I32, 'app_id', None, None, ), # 9
    (10, TType.STRING, 'app_version', None, "", ), # 10
  )

  def __init__(self, pnum=None, pw=None, device_id=None, imsi=None, ic=None, os_type=None, channel=None, client_ip=None, app_id=None, app_version=thrift_spec[10][4],):
    self.pnum = pnum
    self.pw = pw
    self.device_id = device_id
    self.imsi = imsi
    self.ic = ic
    self.os_type = os_type
    self.channel = channel
    self.client_ip = client_ip
    self.app_id = app_id
    self.app_version = app_version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.pnum = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pw = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.device_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.imsi = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ic = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.os_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.channel = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.client_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.app_version = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserAddObj')
    if self.pnum is not None:
      oprot.writeFieldBegin('pnum', TType.I64, 1)
      oprot.writeI64(self.pnum)
      oprot.writeFieldEnd()
    if self.pw is not None:
      oprot.writeFieldBegin('pw', TType.STRING, 2)
      oprot.writeString(self.pw)
      oprot.writeFieldEnd()
    if self.device_id is not None:
      oprot.writeFieldBegin('device_id', TType.STRING, 3)
      oprot.writeString(self.device_id)
      oprot.writeFieldEnd()
    if self.imsi is not None:
      oprot.writeFieldBegin('imsi', TType.STRING, 4)
      oprot.writeString(self.imsi)
      oprot.writeFieldEnd()
    if self.ic is not None:
      oprot.writeFieldBegin('ic', TType.STRING, 5)
      oprot.writeString(self.ic)
      oprot.writeFieldEnd()
    if self.os_type is not None:
      oprot.writeFieldBegin('os_type', TType.STRING, 6)
      oprot.writeString(self.os_type)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.STRING, 7)
      oprot.writeString(self.channel)
      oprot.writeFieldEnd()
    if self.client_ip is not None:
      oprot.writeFieldBegin('client_ip', TType.STRING, 8)
      oprot.writeString(self.client_ip)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 9)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.app_version is not None:
      oprot.writeFieldBegin('app_version', TType.STRING, 10)
      oprot.writeString(self.app_version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pnum)
    value = (value * 31) ^ hash(self.pw)
    value = (value * 31) ^ hash(self.device_id)
    value = (value * 31) ^ hash(self.imsi)
    value = (value * 31) ^ hash(self.ic)
    value = (value * 31) ^ hash(self.os_type)
    value = (value * 31) ^ hash(self.channel)
    value = (value * 31) ^ hash(self.client_ip)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.app_version)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScoreAddObj:
  """
  Attributes:
   - uid
   - device_id
   - action_type
   - currency
   - pack_name
   - trade_type
   - ad_name
   - order_id
   - time_stamp
   - client_ip
   - app_id
   - os_type_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, None, ), # 1
    (2, TType.STRING, 'device_id', None, None, ), # 2
    (3, TType.I32, 'action_type', None, None, ), # 3
    (4, TType.I32, 'currency', None, None, ), # 4
    (5, TType.STRING, 'pack_name', None, None, ), # 5
    (6, TType.I32, 'trade_type', None, None, ), # 6
    (7, TType.STRING, 'ad_name', None, None, ), # 7
    (8, TType.STRING, 'order_id', None, None, ), # 8
    (9, TType.I32, 'time_stamp', None, None, ), # 9
    (10, TType.STRING, 'client_ip', None, None, ), # 10
    (11, TType.I32, 'app_id', None, 0, ), # 11
    (12, TType.I32, 'os_type_id', None, 0, ), # 12
  )

  def __init__(self, uid=None, device_id=None, action_type=None, currency=None, pack_name=None, trade_type=None, ad_name=None, order_id=None, time_stamp=None, client_ip=None, app_id=thrift_spec[11][4], os_type_id=thrift_spec[12][4],):
    self.uid = uid
    self.device_id = device_id
    self.action_type = action_type
    self.currency = currency
    self.pack_name = pack_name
    self.trade_type = trade_type
    self.ad_name = ad_name
    self.order_id = order_id
    self.time_stamp = time_stamp
    self.client_ip = client_ip
    self.app_id = app_id
    self.os_type_id = os_type_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.device_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.action_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.currency = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.pack_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.trade_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ad_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.order_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.time_stamp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.client_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.os_type_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScoreAddObj')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.device_id is not None:
      oprot.writeFieldBegin('device_id', TType.STRING, 2)
      oprot.writeString(self.device_id)
      oprot.writeFieldEnd()
    if self.action_type is not None:
      oprot.writeFieldBegin('action_type', TType.I32, 3)
      oprot.writeI32(self.action_type)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.I32, 4)
      oprot.writeI32(self.currency)
      oprot.writeFieldEnd()
    if self.pack_name is not None:
      oprot.writeFieldBegin('pack_name', TType.STRING, 5)
      oprot.writeString(self.pack_name)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.I32, 6)
      oprot.writeI32(self.trade_type)
      oprot.writeFieldEnd()
    if self.ad_name is not None:
      oprot.writeFieldBegin('ad_name', TType.STRING, 7)
      oprot.writeString(self.ad_name)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.STRING, 8)
      oprot.writeString(self.order_id)
      oprot.writeFieldEnd()
    if self.time_stamp is not None:
      oprot.writeFieldBegin('time_stamp', TType.I32, 9)
      oprot.writeI32(self.time_stamp)
      oprot.writeFieldEnd()
    if self.client_ip is not None:
      oprot.writeFieldBegin('client_ip', TType.STRING, 10)
      oprot.writeString(self.client_ip)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 11)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.os_type_id is not None:
      oprot.writeFieldBegin('os_type_id', TType.I32, 12)
      oprot.writeI32(self.os_type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.device_id)
    value = (value * 31) ^ hash(self.action_type)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.pack_name)
    value = (value * 31) ^ hash(self.trade_type)
    value = (value * 31) ^ hash(self.ad_name)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.time_stamp)
    value = (value * 31) ^ hash(self.client_ip)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.os_type_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserTicket:
  """
  Attributes:
   - islogin
   - ticket
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'islogin', None, None, ), # 1
    (2, TType.STRING, 'ticket', None, None, ), # 2
  )

  def __init__(self, islogin=None, ticket=None,):
    self.islogin = islogin
    self.ticket = ticket

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.islogin = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ticket = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserTicket')
    if self.islogin is not None:
      oprot.writeFieldBegin('islogin', TType.BOOL, 1)
      oprot.writeBool(self.islogin)
      oprot.writeFieldEnd()
    if self.ticket is not None:
      oprot.writeFieldBegin('ticket', TType.STRING, 2)
      oprot.writeString(self.ticket)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.islogin)
    value = (value * 31) ^ hash(self.ticket)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo:
  """
  Attributes:
   - uid
   - mobile
   - pword
   - device_id
   - from_app
   - channel
   - ulevel
   - total_score
   - ctime
   - caution
   - today_score
   - ic
   - ic_content
   - ic_url
   - time_stamp
   - os_type
   - imsi
   - status
   - register_ip
   - score
   - invite_code
   - point
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, None, ), # 1
    (2, TType.I64, 'mobile', None, None, ), # 2
    (3, TType.STRING, 'pword', None, None, ), # 3
    (4, TType.STRING, 'device_id', None, None, ), # 4
    (5, TType.I32, 'from_app', None, None, ), # 5
    (6, TType.STRING, 'channel', None, None, ), # 6
    (7, TType.I16, 'ulevel', None, None, ), # 7
    (8, TType.I32, 'total_score', None, 0, ), # 8
    (9, TType.STRING, 'ctime', None, None, ), # 9
    (10, TType.I16, 'caution', None, None, ), # 10
    (11, TType.I32, 'today_score', None, 0, ), # 11
    (12, TType.I32, 'ic', None, None, ), # 12
    (13, TType.STRING, 'ic_content', None, None, ), # 13
    (14, TType.STRING, 'ic_url', None, None, ), # 14
    (15, TType.I32, 'time_stamp', None, None, ), # 15
    (16, TType.STRING, 'os_type', None, None, ), # 16
    (17, TType.STRING, 'imsi', None, None, ), # 17
    (18, TType.I32, 'status', None, None, ), # 18
    (19, TType.STRING, 'register_ip', None, None, ), # 19
    (20, TType.I32, 'score', None, 0, ), # 20
    (21, TType.I32, 'invite_code', None, 0, ), # 21
    (22, TType.I32, 'point', None, 0, ), # 22
  )

  def __init__(self, uid=None, mobile=None, pword=None, device_id=None, from_app=None, channel=None, ulevel=None, total_score=thrift_spec[8][4], ctime=None, caution=None, today_score=thrift_spec[11][4], ic=None, ic_content=None, ic_url=None, time_stamp=None, os_type=None, imsi=None, status=None, register_ip=None, score=thrift_spec[20][4], invite_code=thrift_spec[21][4], point=thrift_spec[22][4],):
    self.uid = uid
    self.mobile = mobile
    self.pword = pword
    self.device_id = device_id
    self.from_app = from_app
    self.channel = channel
    self.ulevel = ulevel
    self.total_score = total_score
    self.ctime = ctime
    self.caution = caution
    self.today_score = today_score
    self.ic = ic
    self.ic_content = ic_content
    self.ic_url = ic_url
    self.time_stamp = time_stamp
    self.os_type = os_type
    self.imsi = imsi
    self.status = status
    self.register_ip = register_ip
    self.score = score
    self.invite_code = invite_code
    self.point = point

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.mobile = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.pword = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.device_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.from_app = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.channel = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.ulevel = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.total_score = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ctime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.caution = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.today_score = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.ic = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.ic_content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.ic_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.time_stamp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.os_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.imsi = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.register_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.score = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.invite_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.point = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.I64, 2)
      oprot.writeI64(self.mobile)
      oprot.writeFieldEnd()
    if self.pword is not None:
      oprot.writeFieldBegin('pword', TType.STRING, 3)
      oprot.writeString(self.pword)
      oprot.writeFieldEnd()
    if self.device_id is not None:
      oprot.writeFieldBegin('device_id', TType.STRING, 4)
      oprot.writeString(self.device_id)
      oprot.writeFieldEnd()
    if self.from_app is not None:
      oprot.writeFieldBegin('from_app', TType.I32, 5)
      oprot.writeI32(self.from_app)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.STRING, 6)
      oprot.writeString(self.channel)
      oprot.writeFieldEnd()
    if self.ulevel is not None:
      oprot.writeFieldBegin('ulevel', TType.I16, 7)
      oprot.writeI16(self.ulevel)
      oprot.writeFieldEnd()
    if self.total_score is not None:
      oprot.writeFieldBegin('total_score', TType.I32, 8)
      oprot.writeI32(self.total_score)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 9)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    if self.caution is not None:
      oprot.writeFieldBegin('caution', TType.I16, 10)
      oprot.writeI16(self.caution)
      oprot.writeFieldEnd()
    if self.today_score is not None:
      oprot.writeFieldBegin('today_score', TType.I32, 11)
      oprot.writeI32(self.today_score)
      oprot.writeFieldEnd()
    if self.ic is not None:
      oprot.writeFieldBegin('ic', TType.I32, 12)
      oprot.writeI32(self.ic)
      oprot.writeFieldEnd()
    if self.ic_content is not None:
      oprot.writeFieldBegin('ic_content', TType.STRING, 13)
      oprot.writeString(self.ic_content)
      oprot.writeFieldEnd()
    if self.ic_url is not None:
      oprot.writeFieldBegin('ic_url', TType.STRING, 14)
      oprot.writeString(self.ic_url)
      oprot.writeFieldEnd()
    if self.time_stamp is not None:
      oprot.writeFieldBegin('time_stamp', TType.I32, 15)
      oprot.writeI32(self.time_stamp)
      oprot.writeFieldEnd()
    if self.os_type is not None:
      oprot.writeFieldBegin('os_type', TType.STRING, 16)
      oprot.writeString(self.os_type)
      oprot.writeFieldEnd()
    if self.imsi is not None:
      oprot.writeFieldBegin('imsi', TType.STRING, 17)
      oprot.writeString(self.imsi)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 18)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.register_ip is not None:
      oprot.writeFieldBegin('register_ip', TType.STRING, 19)
      oprot.writeString(self.register_ip)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I32, 20)
      oprot.writeI32(self.score)
      oprot.writeFieldEnd()
    if self.invite_code is not None:
      oprot.writeFieldBegin('invite_code', TType.I32, 21)
      oprot.writeI32(self.invite_code)
      oprot.writeFieldEnd()
    if self.point is not None:
      oprot.writeFieldBegin('point', TType.I32, 22)
      oprot.writeI32(self.point)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.mobile)
    value = (value * 31) ^ hash(self.pword)
    value = (value * 31) ^ hash(self.device_id)
    value = (value * 31) ^ hash(self.from_app)
    value = (value * 31) ^ hash(self.channel)
    value = (value * 31) ^ hash(self.ulevel)
    value = (value * 31) ^ hash(self.total_score)
    value = (value * 31) ^ hash(self.ctime)
    value = (value * 31) ^ hash(self.caution)
    value = (value * 31) ^ hash(self.today_score)
    value = (value * 31) ^ hash(self.ic)
    value = (value * 31) ^ hash(self.ic_content)
    value = (value * 31) ^ hash(self.ic_url)
    value = (value * 31) ^ hash(self.time_stamp)
    value = (value * 31) ^ hash(self.os_type)
    value = (value * 31) ^ hash(self.imsi)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.register_ip)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.invite_code)
    value = (value * 31) ^ hash(self.point)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserExInfo:
  """
  Attributes:
   - uid
   - sex
   - birthday
   - workspace
   - ctime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, None, ), # 1
    (2, TType.I32, 'sex', None, None, ), # 2
    (3, TType.STRING, 'birthday', None, None, ), # 3
    (4, TType.I32, 'workspace', None, None, ), # 4
    (5, TType.STRING, 'ctime', None, None, ), # 5
  )

  def __init__(self, uid=None, sex=None, birthday=None, workspace=None, ctime=None,):
    self.uid = uid
    self.sex = sex
    self.birthday = birthday
    self.workspace = workspace
    self.ctime = ctime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sex = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.birthday = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.workspace = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ctime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserExInfo')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 2)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.birthday is not None:
      oprot.writeFieldBegin('birthday', TType.STRING, 3)
      oprot.writeString(self.birthday)
      oprot.writeFieldEnd()
    if self.workspace is not None:
      oprot.writeFieldBegin('workspace', TType.I32, 4)
      oprot.writeI32(self.workspace)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 5)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.sex)
    value = (value * 31) ^ hash(self.birthday)
    value = (value * 31) ^ hash(self.workspace)
    value = (value * 31) ^ hash(self.ctime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
